import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;

public class UlarGame {
    public static final int KOTAK_SIZE = 10;
    public static final char EMPTY_CELL = '-';
    public static final char ULAR_CELL = 'O';
    public static final char MAKANAN_CELL = '*';
    public static final char TEMBOK_CELL = '=';

    private char[][] grid;
    private LinkedList<int[]> ular;
    private int MAKANANX, MAKANANY;
    private Random random;
    private boolean gameOver;

    public UlarGame() {
        grid = new char[KOTAK_SIZE][KOTAK_SIZE];
        ular = new LinkedList<>();
        random = new Random();
        initGame();
    }

    public void initGame() {
        for (int i = 0; i < KOTAK_SIZE; i++) {
            for (int j = 0; j < KOTAK_SIZE; j++) {
                if (i == 0 || i == KOTAK_SIZE - 1 || j == 0 || j == KOTAK_SIZE - 1) {
                    grid[i][j] = TEMBOK_CELL;
                } else {
                    grid[i][j] = EMPTY_CELL;
                }
            }
        }

        int midX = KOTAK_SIZE / 2;
        int midY = KOTAK_SIZE / 2;
        ular.add(new int[]{midX, midY});
        grid[midX][midY] = ULAR_CELL;

        generateMakanan();
        gameOver = false;
    }

    public void generateMakanan() {
        do {
            MAKANANX = random.nextInt(KOTAK_SIZE);
            MAKANANY = random.nextInt(KOTAK_SIZE);
        } while (grid[MAKANANX][MAKANANY] != EMPTY_CELL);
        grid[MAKANANX][MAKANANY] = MAKANAN_CELL;
    }

    public void displayGrid() {
        for (int i = 0; i < KOTAK_SIZE; i++) {
            for (int j = 0; j < KOTAK_SIZE; j++) {
                System.out.print(grid[i][j] + "  ");
            }
            System.out.println();
        }
    }

    public void move(char direction) {
        if (gameOver) return;

        int[] head = ular.getFirst();
        int nextX = head[0], nextY = head[1];
        switch (direction) {
            case 'w':
                nextX--;
                break;
            case 's':
                nextX++;
                break;
            case 'a':
                nextY--;
                break;
            case 'd':
                nextY++;
                break;
        }

        if (grid[nextX][nextY] == TEMBOK_CELL || isUlarCell(nextX, nextY)) {
            gameOver = true;
            System.out.println("Ular menabrak! Game Over!");
            return;
        }

        if (nextX == MAKANANX && nextY == MAKANANY) {
            ular.addFirst(new int[]{nextX, nextY});
            grid[nextX][nextY] = ULAR_CELL;
            generateMakanan();
        } else {
            int[] tail = ular.removeLast();
            grid[tail[0]][tail[1]] = EMPTY_CELL;

            ular.addFirst(new int[]{nextX, nextY});
            grid[nextX][nextY] = ULAR_CELL;
        }
    }

    private boolean isUlarCell(int x, int y) {
        for (int[] part : ular) {
            if (part[0] == x && part[1] == y) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        UlarGame game = new UlarGame();

        while (!game.gameOver) {
            game.displayGrid();
            System.out.print("Gunakan tombol (w/a/s/d) atau 'q' untuk keluar game: ");
            char direction = scanner.next().charAt(0);

            if (direction == 'q') {
                System.out.println("Terima kasih ya sudah main");
                break;
            }

            game.move(direction);
        }

        scanner.close();
    }
}
